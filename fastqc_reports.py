# Script created by James Ashmore https://www.biostars.org/p/152138/#152151
# and edited by Anton Shekhov 

# Import necessary libraries:
import sys
import csv
import os
import subprocess
import zipfile
import getopt

def main (argv):
	inputFolder=""
	outputFolder=""
	outputfile=""
	errorMSG="Usage:\nfastqc_reports.py -i <inputFolder> -o <outputFolder> -f <outputFileName>\nfastqc_report.py -h for help"
	try:
		opts, args = getopt.getopt (argv, "hofi:", ["help",  "outputFolder", "filename", "inputFolder="])
	except getopt.GetoptError:
		print (errorMSG)
		sys.exit(2)
	if len (opts) == 0: 
		print (errorMSG)
		sys.exit (2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print ("Combine reports from fastqc to a single .csv table")
			print ("Usage: fastqc_reports.py -i <inputFolder> -o <outputFolder> -f <outputFileName>")
			print ("Or: fastqc_reports.py --inputFolder <inputFolder> --outputFolder <outputFolder> --filename <outputFileName>")
			print ("Where: ")
			print ("		-i a location of .zip files made by fastqc package")
			print ("		-o an optional argument. A specified location for the output file. If not specified, the default file report will be created in the input folder")
			print ("		-f am optional argument. A name of the report file with extention (.csv). Default name is fastqc_report")
			sys.exit()
		elif opt in ("-i", "--inputFolder"):
			inputFolder = arg
		elif opt in ("-o", "--outputFolder"):
			outputFolder = arg
		elif opt in ("-f", "--filename"):
			outputFile = arg
	if len(outputFolder) == 0: outputFolder = inputFolder
	if len(outputfile) == 0: outputFile = "fastqc_report.csv"
			
	print ("Input folder is " + inputFolder)	

	# List modules used by FastQC:
	modules = ['Basic_Statistics',
			   'Per_base_sequence_quality',
			   'Per_tile_sequence_quality',
			   'Per_sequence_quality_scores',
			   'Per_base_sequence_content',
			   'Per_sequence_GC_content',
			   'Per_base_N_content',
			   'Sequence_Length_Distribution',
			   'Sequence_Duplication_Levels',
			   'Overrepresented_sequences',
			   'Adapter_Content',
			   'Kmer_Content']

	# Set dict to convert module results to integer scores:
	scores = {'pass': 1,
			  'warn': 0,
			  'fail': -1}

	# Set targeted directory
	#cwd = os.getcwd()

	# Get list of '_fastqc.zip' files generated by FastQC:
	files = [file for file in inputFolder if file.endswith('_fastqc.zip')]
	#for f in files: print (f)
	
	# List to collect module scores for each '_fastqc.zip' file:
	all_mod_scores = []

	# Read fastqc_data.txt file in each archive:
	for file in files:
		archive = zipfile.ZipFile(file, 'r') # open '_fastqc.zip' file
		members = archive.namelist() # return list of archive members
		fname = [member for member in members if 'fastqc_data.txt' in member][0] # find 'fastqc_data.txt' in members
		data = archive.open(fname) # open 'fastqc_data.txt'
	  
		# Get module scores for this file:
		mod_scores = [file]
		for line in data:
			text = line.decode('utf-8') 
			if '>>' in text and '>>END' not in text:
				text = text.lstrip('>>').split()
				module = '_'.join(text[:-1])
				result = text[-1]
				mod_scores.append(scores[result])
		
		# Append to all module scores list:
		all_modscores.append(mod_scores)
		
		# close all opened files:
		data.close()
		archive.close()

	# Write scores out to a CSV file:
	fileLoc = os.path.join(os.path.dirname(outputFolder), outputFile)
	#fileLoc = outputFolder + "/" + outputFile
	with open(fileLoc, 'w', newline="") as f:
		writer = csv.writer(f)
		for mod_scores in all_mod_scores:
			writer.writerow(mod_scores)
		f.close()
		
if __name__== "__main__":
	main (sys.argv[1:])